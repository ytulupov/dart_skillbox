import 'package:app/src/my_node.dart';
import 'package:app/src/doubles.dart';
import 'package:app/src/pars_num.dart';
import 'package:app/src/map.dart';
import 'package:app/src/map_to_int.dart';
import 'package:app/src/pointer.dart';
import 'package:app/src/sqr.dart';
import 'package:app/src/user.dart';

void main(List<String> arguments) {
// #1 Реализуйте методы вычисления НОД и НОК целых чисел. Реализуйте метод, который разбивает число на простые множители и возвращает их

  print('#1 Node: ${node(10, 15)}');
  print('#1 НОК: ${lcm(20, 15)}');
  print('#1 simple: ${simple(20)}');

// #2 Реализуйте методы для преобразования целых чисел из десятичной системы в двоичную и обратно.

  print('#2 to2: ${toDouble(20)}');
  print('#2 from2: ${fromDouble(toDouble(20))}');

// #3 Реализуйте метод, который принимает строку слов, разделённых пробелами. Задача — найти в данной строке числа и вернуть коллекцию num этих чисел.

  print('#3 pars: ${pars("1 qwe 2 asad 3")}');

// #4 Есть коллекция слов. Реализуйте метод, возвращающий Map. Данный Map должен соотносить слово и количество его вхождений в данную коллекцию.

  print('#4 mapper: ${mapper(["xx", "qwe", "qwe", "zxc", "xx", "xx"])}');

// #5 Есть коллекция строк вида ‘one, two, three, cat, dog’ или любого другого. Реализуйте метод, возвращающий цифры без повторений,
// которые встречаются в данной строке. Однако цифры встречаются в виде английских слов от zero до nine. Например,
// в результате строки ‘one, two, zero, zero’ мы получим следующий результат: [1, 2, 0].
// Если в строке есть слова, не являющиеся цифрами от 0 до 9, пропускайте их.
  print('#5 mappperint: ${mappperint([
        "one",
        "two",
        "qwe",
        "zxc",
        "two",
        "zero"
      ])}');

// #6 Реализуйте класс Point, который описывает точку в трёхмерном пространстве. У данного класса реализуйте метод distanceTo(Point another),
// который возвращает расстояние от данной точки до точки в параметре. По желанию можете реализовать метод, принимающий три точки в трёхмерном
// пространстве и возвращающий площадь треугольника, который образуют данные точки. Реализуйте factory-конструкторы для данного класса,
// возвращающие начало координат, и ещё несколько на своё усмотрение (например, конструктор, возвращающий точку с координатами [1,1,1],
// которая определяет единичный вектор).

  var zeroP = Point.zero();
  var oneP = Point.two();
  var twoP = Point.twoP();
  print('#6 distanceTo: ${oneP.distanceTo(zeroP)}');
  print('#6 S: ${oneP.S(zeroP, twoP)}');

// #7 Реализуйте метод, который вычисляет корень любой заданной степени из числа. Реализуйте данный метод как extension-метод для num.
// Алгоритм можете взять на википедии как «Алгоритм нахождения корня n-й степени». Запрещается использовать методы math. В случае когда значение вернуть невозможно,
// необходимо бросать исключение с описанием ошибки.
  double nine = 9;
  int root = 2;
  print('#7 sqr: ${sqr(9, root)}');
  print('#7 sqr: ${nine.expsqr(root)}');

// #8 Создайте класс User, у которого есть поле email. Реализуйте два наследника данного класса AdminUser и GeneralUser. Реализуйте mixin над классом User,
// у которого будет метод getMailSystem, который возвращает значение из email, которое находится после @. Например, если email пользователя user@mail.ru,
// то данный метод вернёт mail.ru. Используйте данный миксин на AdminUser. Далее реализуйте класс UserManager<T extends User>, у которого будет храниться
// список пользователей и будут методы добавления или удаления их. Также в UserManager реализуйте метод, который выведет почту всех пользователей,
// однако если пользователь admin, будет выведено значение после @. Проверьте реализованные методы на практике.

  var admin = AdminUser("1@email.ru");
  var general = GeneralUser("2@email.ru");
  var general2 = GeneralUser("3@email.ru");

  var listUser = UserManager();
  // add user
  listUser.add(admin);
  listUser.add(general);
  listUser.add(general2);
  // removeUser
  listUser.removeUser(general2);
  // printAll
  listUser.printAll();

// #9 (Усложнённое). Реализуйте метод, который вычисляет значение определённого интеграла Римана в заданных значениях и с заданной точностью разбиения.
// По возможности учтите случаи, когда функция имеет точки разрыва. Реализованный метод должен принимать функцию, точки x1 и x2, точность разбиения.

// #10 (Очень сложно). Реализуйте метод, который принимает коэффициенты системы линейных уравнений (для любого числа неизвестных).
// Данный метод создаёт матрицу коэффициентов, приводит её к треугольному виду и находит все неизвестные данной системы.
}
